<UserControl
    x:Class="Dynamo.Views.WorkspaceView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Dynamo.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:p="clr-namespace:Dynamo.Wpf.Properties"
    xmlns:ui="clr-namespace:Dynamo.UI.Controls"
    xmlns:viewmodels="clr-namespace:Dynamo.ViewModels;assembly=DynamoCoreWpf"
    xmlns:views="clr-namespace:Dynamo.Views"
    d:DesignHeight="300"
    d:DesignWidth="300"
    AllowDrop="True"
    Drop="OnWorkspaceDrop"
    IsHitTestVisible="{Binding IsCurrentSpace}"
    MouseLeftButtonDown="OnMouseLeftButtonDown"
    MouseMove="OnMouseMove"
    MouseUp="OnMouseRelease"
    PreviewMouseLeftButtonDown="OnPreviewMouseLeftButtonDown"
    mc:Ignorable="d">

    <UserControl.Resources>
        <Style x:Key="ShadowBorder" TargetType="{x:Type Border}">
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                        BlurRadius="0"
                        Opacity="0.7"
                        ShadowDepth="0" />
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=InCanvasSearchViewModel.SearchRootCategories.Count}" Value="0">
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect
                                BlurRadius="20"
                                Opacity="0.7"
                                ShadowDepth="0" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding Path=InCanvasSearchViewModel.CurrentMode, Converter={StaticResource LibraryViewModeToBoolConverter}}" Value="True">
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect
                                BlurRadius="20"
                                Opacity="0.7"
                                ShadowDepth="0" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="WorkspaceContextMenuStyle" TargetType="{x:Type ItemsControl}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <Border Style="{StaticResource ShadowBorder}">
                            <StackPanel
                                Name="ContextMenuPanel"
                                Height="{Binding ElementName=MenuItems, Path=ActualHeight, Converter={StaticResource WorkspaceContextMenuHeightConverter}}"
                                Margin="8,4,8,8">
                                <ui:InCanvasSearchControl
                                    Width="{Binding ElementName=ContextMenuPanel, Path=ActualWidth}"
                                    DataContext="{Binding InCanvasSearchViewModel}"
                                    RequestShowInCanvasSearch="ShowHideContextMenu" />
                                <Border
                                    Name="MenuItems"
                                    Padding="0,3,0,3"
                                    Background="White"
                                    BorderBrush="#bbbbbb"
                                    BorderThickness="1"
                                    CornerRadius="4">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />

                                    <Border.Style>
                                        <Style TargetType="{x:Type Border}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=InCanvasSearchViewModel.SearchRootCategories.Count}" Value="0">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding Path=InCanvasSearchViewModel.CurrentMode, Converter={StaticResource LibraryViewModeToBoolConverter}}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                </Border>
                            </StackPanel>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="WorkspaceContextMenuStylePopup" TargetType="{x:Type Popup}">
            <EventSetter Event="PreviewKeyDown" Handler="OnInCanvasSearchContextMenuKeyDown" />
            <EventSetter Event="PreviewMouseUp" Handler="OnInCanvasSearchContextMenuMouseUp" />
            <EventSetter Event="PreviewMouseDown" Handler="OnInCanvasSearchContextMenuMouseDown" />
        </Style>
        <DataTemplate x:Key="DraggedSelectionTemplate">
            <ItemsControl ItemsSource="{Binding}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="Canvas.Left" Value="{Binding Left}" />
                        <Setter Property="Canvas.Top" Value="{Binding Top}" />
                    </Style>
                </ItemsControl.ItemContainerStyle>
            </ItemsControl>
        </DataTemplate>
    </UserControl.Resources>

    <Grid
        Name="outerCanvas"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        ClipToBounds="True"
        MouseDown="OnCanvasMouseDown"
        PreviewMouseDown="OnCanvasClicked">

        <!--  Infinite grid view should not be hittable by mouse  -->

        <controls:InfiniteGridView x:Name="infiniteGridView" IsHitTestVisible="False">
            <controls:InfiniteGridView.Style>
                <Style TargetType="controls:InfiniteGridView">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=DataContext.PreferenceSettings.IsBackgroundGridVisible, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" Value="True" />
                                <Condition Binding="{Binding Path=DataContext.BackgroundPreviewViewModel.Active, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </controls:InfiniteGridView.Style>
        </controls:InfiniteGridView>

        <!--  Assigning a ZoomBorder.Background so that it can receive mouse input  -->

        <controls:ZoomBorder
            x:Name="zoomBorder"
            Background="Transparent"
            BorderThickness="0"
            ClipToBounds="True"
            Cursor="{Binding CurrentCursor}"
            ForceCursor="{Binding IsCursorForced}">

            <controls:ZoomBorder.IsHitTestVisible>
                <Binding
                    Converter="{StaticResource InverseBooleanConverter}"
                    Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                    RelativeSource="{RelativeSource FindAncestor,
                                                    AncestorType={x:Type TabControl}}" />
            </controls:ZoomBorder.IsHitTestVisible>

            <ItemsControl Name="WorkspaceElements" ItemsSource="{Binding WorkspaceElements}">

                <!--  Resources for the ItemsControl can now be found in DataTemplates.xml  -->

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <controls:DragCanvas
                            x:Name="DragCanvas"
                            Width="0"
                            Height="0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            IsItemsHost="True"
                            Loaded="workBench_OnLoaded"
                            UseLayoutRounding="True"
                            Visibility="Visible">
                            <Canvas.Background>
                                <SolidColorBrush Color="Transparent" />
                            </Canvas.Background>
                            <Canvas.Opacity>
                                <Binding
                                    Converter="{StaticResource NavigationToOpacityConverter}"
                                    Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                                    RelativeSource="{RelativeSource FindAncestor,
                                                                    AncestorType={x:Type controls:DynamoView}}" />
                            </Canvas.Opacity>
                        </controls:DragCanvas>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="Canvas.Left" Value="{Binding Left}" />
                        <Setter Property="Canvas.Top" Value="{Binding Top}" />
                        <Setter Property="Panel.ZIndex" Value="{Binding ZIndex}" />
                    </Style>
                </ItemsControl.ItemContainerStyle>

            </ItemsControl>

        </controls:ZoomBorder>

        <Canvas
            Name="selectionCanvas"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch">
            <Rectangle
                x:Name="selectionBox"
                IsHitTestVisible="False"
                Stroke="Black"
                StrokeThickness="1"
                Visibility="Collapsed" />
        </Canvas>

        <StackPanel
            Name="viewControlPanel"
            Margin="4"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Orientation="Vertical">

            <StackPanel
                Name="statusBarPanel"
                Height="Auto"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Orientation="Horizontal">
                <StackPanel.Visibility>
                    <Binding
                        Converter="{StaticResource BooleanToVisibilityConverter}"
                        Path="DataContext.BackgroundPreviewViewModel.Active"
                        RelativeSource="{RelativeSource FindAncestor,
                                                        AncestorType={x:Type controls:DynamoView}}" />
                </StackPanel.Visibility>
                <ui:ImageCheckBox
                    Width="56"
                    Height="30"
                    Margin="4,4,0,4"
                    CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-geom-check.png"
                    StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-geom-states.png"
                    ToolTip="{x:Static p:Resources.InCanvasGeomButtonToolTip}">
                    <ui:ImageCheckBox.IsChecked>
                        <Binding Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                    </ui:ImageCheckBox.IsChecked>
                </ui:ImageCheckBox>
                <ui:ImageCheckBox
                    Width="55"
                    Height="30"
                    Margin="0,4,0,4"
                    CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-node-check.png"
                    StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-node-states.png"
                    ToolTip="{x:Static p:Resources.InCanvasNodeButtonToolTip}">
                    <ui:ImageCheckBox.IsChecked>
                        <Binding
                            Converter="{StaticResource InverseBooleanConverter}"
                            Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                            RelativeSource="{RelativeSource FindAncestor,
                                                            AncestorType={x:Type controls:DynamoView}}" />
                    </ui:ImageCheckBox.IsChecked>
                </ui:ImageCheckBox>
            </StackPanel>

            <ui:ImageButton
                Width="30"
                Height="28"
                HorizontalAlignment="Right"
                StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-fit-view-states.png"
                ToolTip="{x:Static p:Resources.InCanvasFitViewButtonToolTip}">
                <ui:ImageButton.Command>
                    <Binding Path="DataContext.FitViewCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageButton.Command>
            </ui:ImageButton>

            <ui:ImageRepeatButton
                Width="30"
                Height="24"
                HorizontalAlignment="Right"
                StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-zoom-in-states.png"
                ToolTip="{x:Static p:Resources.InCanvasZoomInButtonToolTip}">
                <ui:ImageRepeatButton.Command>
                    <Binding Path="DataContext.ZoomInCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageRepeatButton.Command>
            </ui:ImageRepeatButton>

            <ui:ImageRepeatButton
                Width="30"
                Height="28"
                HorizontalAlignment="Right"
                StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-zoom-out-states.png"
                ToolTip="{x:Static p:Resources.InCanvasZoomOutButtonToolTip}">
                <ui:ImageRepeatButton.Command>
                    <Binding Path="DataContext.ZoomOutCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageRepeatButton.Command>
            </ui:ImageRepeatButton>

            <ui:ImageCheckBox
                Width="30"
                Height="30"
                HorizontalAlignment="Right"
                CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-pan-check.png"
                StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-pan-states.png"
                ToolTip="{x:Static p:Resources.InCanvasPanButtonToolTip}">
                <ui:ImageCheckBox.Command>
                    <Binding Path="DataContext.BackgroundPreviewViewModel.TogglePanCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Command>
                <ui:ImageCheckBox.IsChecked>
                    <Binding Mode="OneWay" Path="IsPanning" />
                </ui:ImageCheckBox.IsChecked>
            </ui:ImageCheckBox>

            <ui:ImageCheckBox
                Width="30"
                Height="30"
                HorizontalAlignment="Right"
                CheckImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-orbit-check.png"
                StateImage="/DynamoCoreWpf;component/UI/Images/Canvas/canvas-button-orbit-states.png"
                ToolTip="{x:Static p:Resources.InCanvasOrbitButtonToolTip}">
                <ui:ImageCheckBox.Command>
                    <Binding Path="DataContext.BackgroundPreviewViewModel.ToggleOrbitCommand" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Command>
                <ui:ImageCheckBox.IsChecked>
                    <Binding Mode="OneWay" Path="IsOrbiting" />
                </ui:ImageCheckBox.IsChecked>
                <ui:ImageCheckBox.Visibility>
                    <Binding
                        Converter="{StaticResource BooleanToVisibilityConverter}"
                        Path="DataContext.BackgroundPreviewViewModel.CanNavigateBackground"
                        RelativeSource="{RelativeSource FindAncestor,
                                                        AncestorType={x:Type controls:DynamoView}}" />
                </ui:ImageCheckBox.Visibility>
            </ui:ImageCheckBox>

        </StackPanel>

        <Popup
            Name="InCanvasSearchBar"
            AllowsTransparency="True"
            DataContext="{Binding InCanvasSearchViewModel}"
            IsOpen="False"
            Placement="MousePoint"
            StaysOpen="True">
            <ui:InCanvasSearchControl RequestShowInCanvasSearch="ShowHideInCanvasControl" />
        </Popup>

        <Popup
            Name="NodeAutoCompleteSearchBar"
            AllowsTransparency="True"
            DataContext="{Binding NodeAutoCompleteSearchViewModel}"
            IsOpen="False"
            Placement="Custom"
            StaysOpen="True">
            <ui:NodeAutoCompleteSearchControl RequestShowNodeAutoCompleteSearch="ShowHideNodeAutoCompleteControl" />
        </Popup>

        <Popup
            Name="ContextMenuPopup"
            AllowsTransparency="True"
            Opened="OnContextMenuOpened"
            Placement="MousePoint"
            StaysOpen="True"
            Style="{StaticResource WorkspaceContextMenuStylePopup}">
            <Popup.Resources>
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="Focusable" Value="False" />
                </Style>
            </Popup.Resources>
            <ItemsControl Style="{StaticResource WorkspaceContextMenuStyle}">
                <ItemsControl.Items>
                    <controls:ParentMenuItem x:Name="WorkspaceLacingMenu" Header="{x:Static p:Resources.ContextMenuLacing}">

                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="Auto"
                            Header="{x:Static p:Resources.ContextMenuLacingAuto}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Auto"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="Shortest"
                            Header="{x:Static p:Resources.ContextMenuLacingShortest}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Shortest"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="Longest"
                            Header="{x:Static p:Resources.ContextMenuLacingLongest}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="Longest"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                        <MenuItem
                            Command="{Binding Path=SetArgumentLacingCommand}"
                            CommandParameter="CrossProduct"
                            Header="{x:Static p:Resources.ContextMenuLacingCrossProduct}"
                            IsCheckable="True">
                            <MenuItem.IsChecked>
                                <Binding
                                    Converter="{StaticResource EnumToBoolConverter}"
                                    ConverterParameter="CrossProduct"
                                    Mode="OneWay"
                                    Path="SelectionArgumentLacing" />
                            </MenuItem.IsChecked>
                        </MenuItem>

                    </controls:ParentMenuItem>
                    <MenuItem
                        Command="{Binding Path=ShowHideAllGeometryPreviewCommand}"
                        CommandParameter="true"
                        Header="{x:Static p:Resources.ContextMenuShowAllGeometry}"
                        IsEnabled="{Binding Path=IsGeometryOperationEnabled}"
                        Visibility="{Binding Path=AnyNodeVisible, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <MenuItem
                        Command="{Binding Path=ShowHideAllGeometryPreviewCommand}"
                        CommandParameter="false"
                        Header="{x:Static p:Resources.ContextMenuHideAllGeometry}"
                        IsEnabled="{Binding Path=IsGeometryOperationEnabled}"
                        Visibility="{Binding Path=AnyNodeVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <controls:ParentMenuItem x:Name="Align" Header="{x:Static p:Resources.DynamoViewEditMenuAlignSelection}">
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="HorizontalCenter"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignXAverage}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="HorizontalLeft"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignLeft}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="HorizontalRight"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignRight}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="VerticalCenter"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignYAverage}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="VerticalTop"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignTop}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="VerticalBottom"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlighBottom}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="VerticalDistribute"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignYDistribute}" />
                        <MenuItem
                            Command="{Binding AlignSelectedCommand}"
                            CommandParameter="HorizontalDistribute"
                            Header="{x:Static p:Resources.DynamoViewEditMenuAlignXDistribute}" />
                    </controls:ParentMenuItem>

                    <MenuItem
                        Command="{Binding NodeFromSelectionCommand}"
                        CommandTarget="{Binding ElementName=_this}"
                        Header="{x:Static p:Resources.ContextMenuNodesFromSelection}" />


                    <MenuItem
                        Command="{Binding NodeToCodeCommand}"
                        Header="{x:Static p:Resources.ContextMenuNodeToCode}"
                        Visibility="{Binding Path=CanRunNodeToCode, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <MenuItem Command="{Binding DynamoViewModel.AddAnnotationCommand}" Header="{x:Static p:Resources.ContextCreateGroupFromSelection}" />


                    <MenuItem
                        Command="{Binding FindNodesFromSelectionCommand}"
                        Header="{x:Static p:Resources.ContextMenuNodesFromGeometry}"
                        Visibility="{Binding Path=CanFindNodesFromElements, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <Separator Visibility="{Binding Path=CanCopyOrPaste, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <MenuItem
                        Command="{Binding CopyCommand}"
                        Header="{x:Static p:Resources.ContextMenuCopy}"
                        Visibility="{Binding Path=CanCopy, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <MenuItem
                        Command="{Binding PasteCommand}"
                        Header="{x:Static p:Resources.ContextMenuPaste}"
                        Visibility="{Binding Path=CanPaste, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />

                    <Separator Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <MenuItem
                        Click="WorkspacePropertyEditClick"
                        Header="{x:Static p:Resources.ContextMenuEditCustomNodeProperty}"
                        Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />
                    <MenuItem
                        Name="Publish"
                        Command="{Binding DynamoViewModel.PublishCurrentWorkspaceCommand}"
                        Header="{x:Static p:Resources.ContextMenuPublishCustomNode}"
                        Visibility="{Binding Path=IsHomeSpace, Converter={StaticResource InverseBoolToVisibilityCollapsedConverter}}" />

                    <Separator />

                    <MenuItem
                        Command="{Binding DynamoViewModel.BackgroundPreviewViewModel.ToggleCanNavigateBackgroundCommand}"
                        Header="{x:Static p:Resources.ContextMenuGeometryView}"
                        Visibility="{Binding DynamoViewModel.BackgroundPreviewViewModel.Active, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
                    <MenuItem Command="{Binding DynamoViewModel.BackgroundPreviewViewModel.TogglePanCommand}" Header="{x:Static p:Resources.ContextMenuPan}">
                        <MenuItem.IsChecked>
                            <Binding Mode="OneWay" Path="DynamoViewModel.BackgroundPreviewViewModel.IsPanning" />
                        </MenuItem.IsChecked>
                    </MenuItem>
                    <MenuItem Command="{Binding DynamoViewModel.FitViewCommand}" Header="{x:Static p:Resources.ContextMenuFitToScreen}" />
                </ItemsControl.Items>
            </ItemsControl>
        </Popup>

    </Grid>
</UserControl>
